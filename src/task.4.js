// Generated by CoffeeScript 1.6.3
/*
  Работа с презентациями
*/


(function() {
  var KEYS, present_item_tpl, present_main_tpl,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  present_item_tpl = function(_) {
    return " <div class=\"col-md-3  presentation\">\n  <div class=\"thumbnail\" style=\"height: 267px; cursor: pointer;\" data-id=\"" + _._id + "\" >\n    <h4 style=\"text-align: center;\">" + _.name + "</h4>\n    <img src=\"" + (_.getCoverImg()) + "\" style=\"background-color: #ccc; max-height: 200px; max-width: 250px;\">\n    <p class=\"count-slides\" style=\"text-align: right; padding-top: 10px;\">Слайдов: " + (_.countSlides()) + "</p>\n  </div>\n</div> ";
  };

  present_main_tpl = function(_) {
    return "<div class=\"presentation-container\" >\n<section class=\"slide\">\n  <img style=\"height: 100%;\" src=\"" + (_.getCurentSlide().img) + "\" />\n</section>\n<footer>\n  <div >\n    <div class=\"col-md-3\">\n      <b>" + _.name + "</b>\n    </div>\n\n    <div class=\"col-md-3 col-md-offset-2\">\n      <button><i class=\"glyphicon glyphicon-arrow-left prev\"></i></button>\n      <button><i class=\"glyphicon glyphicon-arrow-right next\"></i></button>\n    </div>\n\n    <div class=\"col-md-2 col-md-offset-2\">\n      Слайды " + (_.getCurentSlide().index) + " из " + (_.countSlides()) + "\n    </div>\n\n  </div>\n</footer>\n</div>";
  };

  KEYS = {
    ESC: 27,
    ARROW_RIGHT: 39,
    ARROW_LEFT: 37
  };

  window.Library = (function() {
    function Library(container, presentations) {
      var i, _, _i, _len, _ref,
        _this = this;
      this.container = container;
      this.presentations = presentations;
      this.onSelectPresent = __bind(this.onSelectPresent, this);
      this.onCancelPresent = __bind(this.onCancelPresent, this);
      this.reRenderWithCurrentPresent = __bind(this.reRenderWithCurrentPresent, this);
      this.onNextSlide = __bind(this.onNextSlide, this);
      this.onPrevSlide = __bind(this.onPrevSlide, this);
      this.current_presentation = null;
      this.present_container = null;
      _ref = this.presentations;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        _ = _ref[i];
        _.setId(i);
      }
      this.container.on('click', '.presentation > div', this.onSelectPresent);
      this.container.on('click', '.prev', this.onPrevSlide);
      this.container.on('click', '.next', this.onNextSlide);
      $(document).on('keyup', function(e) {
        var keyCode;
        keyCode = e.keyCode;
        if (!_this.current_presentation) {
          return;
        }
        if (keyCode === KEYS.ESC) {
          return _this.onCancelPresent();
        } else if (keyCode === KEYS.ARROW_LEFT) {
          return _this.onPrevSlide();
        } else if (keyCode === KEYS.ARROW_RIGHT) {
          return _this.onNextSlide();
        }
      });
    }

    Library.prototype.onPrevSlide = function() {
      this.current_presentation.prev();
      return this.reRenderWithCurrentPresent();
    };

    Library.prototype.onNextSlide = function() {
      this.current_presentation.next();
      return this.reRenderWithCurrentPresent();
    };

    Library.prototype.reRenderWithCurrentPresent = function() {
      this.present_container.empty();
      return this.present_container.html($(present_main_tpl(this.current_presentation)).html());
    };

    Library.prototype.onCancelPresent = function() {
      if (confirm('Вы действительно хотите закрыть презентацию?')) {
        this.current_presentation = null;
        this.present_container.remove();
        return this.present_container = null;
      }
    };

    Library.prototype.onSelectPresent = function(e) {
      var present, presentId;
      presentId = e.currentTarget.dataset.id;
      present = this.get(presentId);
      if (present.slides.length === 0) {
        alert('В данной презентации нет слайдов для показа');
        return;
      }
      this.current_presentation = present;
      this.present_container = $(present_main_tpl(present));
      return this.container.append(this.present_container);
    };

    Library.prototype.get = function(i) {
      return this.presentations[i];
    };

    Library.prototype.render = function() {
      var $row, _, _i, _len, _ref;
      $row = $('<div class=row></div>');
      _ref = this.presentations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ = _ref[_i];
        $row.append(present_item_tpl(_));
      }
      return this.container.html($row);
    };

    return Library;

  })();

  window.Presentation = (function() {
    function Presentation(name, slides) {
      this.name = name;
      this.slides = slides != null ? slides : [];
      this._id = null;
      this._current_slide = 0;
    }

    Presentation.prototype.getCurentSlide = function() {
      return {
        index: this._current_slide + 1,
        img: this.slides[this._current_slide]
      };
    };

    Presentation.prototype.next = function() {
      if (this._current_slide < this.slides.length - 1) {
        this._current_slide++;
      }
      return this;
    };

    Presentation.prototype.prev = function() {
      if (this._current_slide > 0) {
        this._current_slide--;
      }
      return this;
    };

    Presentation.prototype.getCoverImg = function() {
      var _ref;
      return ((_ref = this.slides) != null ? _ref[0] : void 0) || '';
    };

    Presentation.prototype.countSlides = function() {
      var _ref;
      return ((_ref = this.slides) != null ? _ref.length : void 0) || 0;
    };

    Presentation.prototype.setId = function(_id) {
      this._id = _id;
    };

    return Presentation;

  })();

}).call(this);
